# -*- coding: utf-8 -*-
"""Untitled52.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13b29glmtLzSnUZ3K07HYvjmNrrmNPRKP
"""

# ================================================================
# Project: Fetal Health Classification using Neural Networks
# ================================================================
# Author: [Islam Abdulrahim]
# Description:
# This project builds and evaluates a neural network model to classify fetal health conditions
# (Normal, Suspect, Pathological) based on physiological features recorded from cardiotocograms.
#
# Dataset:
# The dataset "fetal_health.csv" contains medical signal measurements used to assess fetal well-being.
# Each row represents a patient record with 21 numerical features and a target variable (fetal_health).
#
# Objective:
# To accurately predict the fetal health status using a deep learning model.
#
# Steps:
# 1. Load and explore the dataset.
# 2. Visualize feature distributions and relationships with the target.
# 3. Preprocess data (scaling, train-test split).
# 4. Build and train a neural network classifier.
# 5. Evaluate the model using accuracy, confusion matrix, and classification report.
# ================================================================

# 1. Import Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 2. Load Dataset
df = pd.read_csv('/content/fetal_health.csv')
df.sample(5)

# Display dataset shape and information
df.shape
df.info()
df.isnull().sum()

# 3. Visualization Setup
sns.set(style="whitegrid", palette="Set2")
plt.rcParams['figure.figsize'] = (8, 5)

# 4. Define Feature Columns
features = [
    'baseline value', 'accelerations', 'fetal_movement', 'uterine_contractions',
    'light_decelerations', 'severe_decelerations', 'prolongued_decelerations',
    'abnormal_short_term_variability', 'mean_value_of_short_term_variability',
    'percentage_of_time_with_abnormal_long_term_variability',
    'histogram_min', 'histogram_max', 'histogram_number_of_peaks',
    'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean',
    'histogram_median', 'histogram_variance', 'histogram_tendency'
]

# 5. Visualize the Relationship Between Each Feature and the Target Variable
for col in features:
    plt.figure()
    sns.boxplot(x='fetal_health', y=col, data=df)
    plt.title(f'{col} vs Fetal Health', fontsize=13)
    plt.xlabel('Fetal Health (1=Normal, 2=Suspect, 3=Pathological)')
    plt.ylabel(col)
    plt.tight_layout()
    plt.show()
    print('\n\n')

# 6. Feature and Target Separation
X = df[features]
y = df['fetal_health'] - 1  # Adjust labels for TensorFlow (0,1,2)

# 7. Feature Scaling
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

import joblib
joblib.dump(scaler, '/content/standard_scaler.pkl')
print("✅ Scaler saved successfully.")

# 8. Train-Test Split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)





# 9. Build Neural Network Model
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

model = keras.Sequential([
    layers.Dense(128, activation='relu', input_shape=(x_train.shape[1],)),
    layers.Dropout(0.2),
    layers.Dense(64, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(3, activation='softmax')  # Output layer for 3 fetal health classes
])

# 10. Compile the Model
from tensorflow.keras.optimizers import Adam

model.compile(
    optimizer=Adam(learning_rate=0.0005),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# 11. Set Up Callbacks
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=1e-5)

# 12. Train the Model
history = model.fit(
    x_train, y_train,
    epochs=100,
    batch_size=32,
    validation_data=(X, y),
    callbacks=[early_stop, reduce_lr]
)

# 13. Evaluate Model on Test Set
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"\nTest Accuracy: {test_acc*100:.2f}%")

# Accuracy Plot
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy', linewidth=2)
plt.plot(history.history['val_accuracy'], label='Validation Accuracy', linewidth=2, linestyle='--')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
print('\n\n')
# Loss Plot
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss', linewidth=2)
plt.plot(history.history['val_loss'], label='Validation Loss', linewidth=2, linestyle='--')
plt.title('Loss Over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# 15. Confusion Matrix
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

y_pred = model.predict(x_test)
y_pred_classes = np.argmax(y_pred, axis=1)

cm = confusion_matrix(y_test, y_pred_classes)
labels = [1, 2, 3]

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
disp.plot(cmap='Blues', values_format='d')
plt.title("Confusion Matrix for Fetal Health Classification")
plt.show()

# 16. Classification Report
from sklearn.metrics import classification_report

print("Classification Report:")
print(classification_report(y_test, y_pred_classes, target_names=['Health 1', 'Health 2', 'Health 3']))

# ======================
# 17. Results Summary
# ======================
print("=============================================")
print("RESULTS SUMMARY")
print("=============================================")
print(f"Final Test Accuracy: {test_acc*100:.2f}%")
print("The model demonstrates strong capability in classifying fetal health conditions.")
print("Health 1 (Normal) predictions are highly accurate, while Health 2 and 3 show solid generalization.")
print("=============================================")

# ======================
# 18.*************
# ======================
import joblib

# 1. Save the trained model
model.save('/content/fetal_health_model.h5')
print("✅ Model saved successfully at '/content/fetal_health_model.h5'")

import gradio as gr
import numpy as np
import joblib
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
import io
import base64
import time

# ============================
# Load model and scaler
# ============================
try:
    model = load_model('/content/fetal_health_model.h5')
    scaler = joblib.load('/content/standard_scaler.pkl')
    print("✅ Model and Scaler loaded successfully.")
except Exception as e:
    print(f"Error loading model or scaler: {e}")

# ============================
# Prediction function with enhanced output
# ============================
def predict_fetal_health(*args):
    try:
        input_data = np.array([args], dtype=float)
        scaled_data = scaler.transform(input_data)
        prediction = model.predict(scaled_data, verbose=0)
        predicted_class = int(np.argmax(prediction, axis=1)[0]) + 1
        probabilities = prediction[0] * 100

        labels_map = {1: "Normal", 2: "Suspect", 3: "Pathological"}
        messages_map = {
            "Normal": "🟢 Normal (Healthy Fetus)",
            "Suspect": "🟡 Suspect (Needs Monitoring)",
            "Pathological": "🔴 Pathological (High Risk)"
        }

        # Create a modern, sleek chart
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(7, 4))
        colors = ['#00d9ff', '#ffa500', '#ff4757'] # Vibrant modern colors
        bars = ax.bar(labels_map.values(), probabilities, color=colors, edgecolor='white', linewidth=1)
        ax.set_ylabel('Probability (%)', color='#f0f0f0', fontsize=12)
        ax.set_title('Classification Confidence', color='#ffffff', fontsize=16, fontweight='bold', pad=20)
        ax.set_ylim(0, 100)
        ax.tick_params(colors='#cccccc', labelsize=10)
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_color('#555555')
        ax.spines['bottom'].set_color('#555555')
        ax.grid(axis='y', linestyle='--', alpha=0.2)

        for bar, prob in zip(bars, probabilities):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{prob:.1f}%', ha='center', va='bottom', color='#ffffff', fontweight='bold', fontsize=11)

        buf = io.BytesIO()
        fig.tight_layout(pad=2.0)
        fig.savefig(buf, format='png', dpi=120, facecolor='#0a0a0a', edgecolor='none')
        buf.seek(0)
        chart_base64 = base64.b64encode(buf.read()).decode('utf-8')
        plt.close(fig)

        status_key = labels_map.get(predicted_class, "Normal")
        status_styles = {
            "Normal": {"color": "#00d9ff", "bg": "rgba(0, 217, 255, 0.1)", "border": "rgba(0, 217, 255, 0.5)"},
            "Suspect": {"color": "#ffa500", "bg": "rgba(255, 165, 0, 0.1)", "border": "rgba(255, 165, 0, 0.5)"},
            "Pathological": {"color": "#ff4757", "bg": "rgba(255, 71, 87, 0.1)", "border": "rgba(255, 71, 87, 0.5)"}
        }
        style = status_styles.get(status_key, status_styles["Normal"])

        html_output = f"""
        <div style="background: linear-gradient(145deg, {style['bg']}, rgba(255,255,255,0.02)); border: 1px solid {style['border']}; border-radius: 16px; padding: 30px; margin-bottom: 25px; text-align: center; backdrop-filter: blur(10px);">
            <h2 style="color: {style['color']}; margin-top: 0; font-size: 28px; font-weight: 700; text-shadow: 0 0 15px {style['color']};">{messages_map.get(status_key, "Unknown")}</h2>
        </div>
        <div style="text-align: center; padding: 15px; background-color: rgba(255, 255, 255, 0.03); border-radius: 16px; border: 1px solid rgba(255, 255, 255, 0.1);">
            <img src="data:image/png;base64,{chart_base64}" alt="Prediction Probabilities" style="max-width: 100%; border-radius: 12px;">
        </div>
        """
        return html_output
    except Exception as e:
        return f"<p style='color: #ff4757; text-align: center; font-size: 16px;'>⚠️ Error: {str(e)}</p>"

# ============================
# Ultra-Modern Theme & CSS
# ============================
custom_css = """
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');

:root {
    --bg-color: #0a0a0a;
    --panel-bg: rgba(255, 255, 255, 0.05);
    --panel-border: rgba(255, 255, 255, 0.1);
    --text-primary: #ffffff;
    --text-secondary: #b0b0b0;
    --accent-color: #00d9ff;
    --accent-hover: #00a8cc;
    --font-family: 'Poppins', sans-serif;
}

body, .gradio-container {
    font-family: var(--font-family);
    background: var(--bg-color);
    color: var(--text-primary);
    background-image:
        radial-gradient(at 40% 20%, rgba(0, 217, 255, 0.1) 0px, transparent 50%),
        radial-gradient(at 80% 0%, rgba(255, 71, 87, 0.1) 0px, transparent 50%),
        radial-gradient(at 0% 50%, rgba(255, 165, 0, 0.05) 0px, transparent 50%);
}

h1 {
    text-align: center;
    font-weight: 700;
    font-size: 3rem;
    background: linear-gradient(90deg, var(--accent-color), #ff4757);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 0 30px rgba(0, 217, 255, 0.5);
    margin-bottom: 10px;
}

.main-description {
    text-align: center;
    font-size: 1.1rem;
    color: var(--text-secondary);
    margin-bottom: 40px;
    font-weight: 300;
}

/* Glassmorphism Panel */
.glass-panel {
    background: var(--panel-bg);
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
    border-radius: 20px;
    border: 1px solid var(--panel-border);
    padding: 25px;
    margin-bottom: 20px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    transition: all 0.3s ease;
}

.glass-panel:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.5);
}

.glass-panel h3 {
    color: var(--accent-color);
    margin-top: 0;
    font-weight: 600;
    border-bottom: 1px solid var(--panel-border);
    padding-bottom: 10px;
    margin-bottom: 20px;
}

/* Input Fields */
input[type="number"], textarea {
    background: rgba(255, 255, 255, 0.07);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    color: var(--text-primary) !important;
    font-size: 14px;
    padding: 12px;
    transition: all 0.3s ease;
}

input[type="number"]:focus, textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(0, 217, 255, 0.2);
    background: rgba(255, 255, 255, 0.1);
}

/* Tabs */
.tabs {
    border: none !important;
}

.tab-nav {
    border-bottom: 1px solid var(--panel-border) !important;
    gap: 10px;
}

.tab-nav button {
    color: var(--text-secondary) !important;
    background: transparent !important;
    border: none !important;
    border-radius: 10px 10px 0 0 !important;
    padding: 10px 20px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.tab-nav button.selected {
    color: var(--text-primary) !important;
    background: var(--panel-bg) !important;
    backdrop-filter: blur(10px);
    border-bottom: 2px solid var(--accent-color) !important;
}

/* Button */
.btn-primary {
    background: linear-gradient(45deg, var(--accent-color), #0099cc) !important;
    border: none !important;
    color: var(--bg-color) !important;
    font-weight: 700 !important;
    font-size: 1.2rem !important;
    padding: 15px 30px !important;
    border-radius: 50px !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 4px 20px rgba(0, 217, 255, 0.4) !important;
    width: 100% !important;
}

.btn-primary:hover {
    transform: translateY(-3px) scale(1.02) !important;
    box-shadow: 0 6px 25px rgba(0, 217, 255, 0.6) !important;
}

/* Output */
#component-0 { /* The output HTML component */
    background: transparent;
    border: none;
    padding: 0;
}

footer { visibility: hidden; }
"""

# ============================
# Gradio Interface with the new design
# ============================
with gr.Blocks(
    theme=gr.themes.Base(),
    title="Fetal Health Analysis",
    css=custom_css
) as app:
    gr.HTML("""
    <div style="text-align: center; padding: 20px;">
        <h1>Fetal Health AI</h1>
        <p class="main-description">Next-Generation Neural Network Analysis for Fetal Well-being</p>
    </div>
    """)

    with gr.Tabs(elem_classes=["tabs"]):
        with gr.TabItem("🫀 Core Metrics"):
            with gr.Column(elem_classes=["glass-panel"]):
                gr.Markdown("### Primary Cardiotocography Data")
                with gr.Row():
                    with gr.Column():
                        baseline_value = gr.Number(label="Baseline Value (bpm)", value=0)
                        accelerations = gr.Number(label="Accelerations", value=0)
                        fetal_movement = gr.Number(label="Fetal Movement", value=0)
                    with gr.Column():
                        uterine_contractions = gr.Number(label="Uterine Contractions", value=0)
                        light_decelerations = gr.Number(label="Light Decelerations", value=0)
                        severe_decelerations = gr.Number(label="Severe Decelerations", value=0)
                        prolongued_decelerations = gr.Number(label="Prolonged Decelerations", value=0)

        with gr.TabItem("📈 Variability Analysis"):
            with gr.Column(elem_classes=["glass-panel"]):
                gr.Markdown("### Heart Rate Variability Metrics")
                with gr.Row():
                    with gr.Column():
                        abnormal_short_term_variability = gr.Number(label="Abnormal Short Term Variability (%)", value=0)
                        mean_value_of_short_term_variability = gr.Number(label="Mean Value of Short Term Variability", value=0)
                    with gr.Column():
                        percentage_of_time_with_abnormal_long_term_variability = gr.Number(label="Percentage of Time with Abnormal Long Term Variability (%)", value=0)

        with gr.TabItem("📊 Histogram Statistics"):
            with gr.Column(elem_classes=["glass-panel"]):
                gr.Markdown("### Advanced Histogram Data")
                with gr.Row():
                    with gr.Column():
                        histogram_min = gr.Number(label="Histogram Min", value=0)
                        histogram_max = gr.Number(label="Histogram Max", value=0)
                        histogram_number_of_peaks = gr.Number(label="Number of Peaks", value=0)
                        histogram_number_of_zeroes = gr.Number(label="Number of Zeroes", value=0)
                    with gr.Column():
                        histogram_mode = gr.Number(label="Histogram Mode", value=0)
                        histogram_mean = gr.Number(label="Histogram Mean", value=0)
                        histogram_median = gr.Number(label="Histogram Median", value=0)
                        histogram_variance = gr.Number(label="Histogram Variance", value=0)
                        histogram_tendency = gr.Number(label="Histogram Tendency", value=0)

    with gr.Row():
        predict_btn = gr.Button("🚀 Launch Analysis", variant="primary", elem_classes=["btn-primary"])

    gr.Markdown("### 🎯 Diagnostic Result")
    output = gr.HTML(label="")

    inputs_list = [
        baseline_value, accelerations, fetal_movement, uterine_contractions,
        light_decelerations, severe_decelerations, prolongued_decelerations,
        abnormal_short_term_variability, mean_value_of_short_term_variability,
        percentage_of_time_with_abnormal_long_term_variability,
        histogram_min, histogram_max, histogram_number_of_peaks,
        histogram_number_of_zeroes, histogram_mode, histogram_mean,
        histogram_median, histogram_variance, histogram_tendency
    ]

    predict_btn.click(fn=predict_fetal_health, inputs=inputs_list, outputs=output)

    gr.HTML("""
    <div style="text-align: center; margin-top: 40px; color: var(--text-secondary); font-size: 0.9em; padding: 20px;">
        <p>Disclaimer: This tool is for informational purposes only and does not constitute medical advice.</p>
    </div>
    """)

app.launch()